import 'package:base_project/core/di/injector.dart';
import 'package:base_project/core/state_manager/mobx_manager.dart';
import 'package:flutter/material.dart';
import 'package:flutter_mobx/flutter_mobx.dart';

import 'vulnerability_progress_builder_controller.dart';

class VulnerabilityProgressBuilder
    extends MobxStatefulWidget<VulnerabilityProgressBuilderController> {
  final String projectName;

  final Widget Function(int total, int resolved) builder;

  const VulnerabilityProgressBuilder({
    super.key,
    required this.projectName,
    required this.builder,
  });

  @override
  MobxState<MobxStatefulWidget<VulnerabilityProgressBuilderController>,
          VulnerabilityProgressBuilderController>
      createState() => _VulnerabilityProgressBuilderState();

  @override
  VulnerabilityProgressBuilderController? createController() =>
      VulnerabilityProgressBuilderController(injector(), projectName);
}

class _VulnerabilityProgressBuilderState extends MobxState<
    VulnerabilityProgressBuilder, VulnerabilityProgressBuilderController> {
  @override
  Widget build(BuildContext context) {
    return Observer(
      builder: (context) => widget.builder(
          int.tryParse(controller.progress['total']?.toString() ?? '0') ?? 0,
          int.tryParse(controller.progress['resolved']?.toString() ?? '0') ??
              0),
    );
  }
}
