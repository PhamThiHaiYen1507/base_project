import 'package:base_project/core/extensions/exception_extension.dart';
import 'package:base_project/core/type_def/api_response_data.dart';
import 'package:base_project/layers/data/source/api_client.dart';
import 'package:base_project/layers/domain/repositories/vulnerability_repository.dart';
import 'package:either_dart/either.dart';
import 'package:injectable/injectable.dart';

@Singleton(as: VulnerabilityRepository)
class VulnerabilityRepositoryImpl implements VulnerabilityRepository {
  final ApiClient _client;

  VulnerabilityRepositoryImpl(this._client);

  @override
  Future<ApiResponseData<Map<String, dynamic>?>> getVulnProgress(
      String projectName) async {
    try {
      final res = await _client.getVulnProgress(projectName);

      return Right(res.data);
    } on Exception catch (e, stackTrace) {
      return Left(e.handlerApiException(stackTrace));
    }
  }
}
